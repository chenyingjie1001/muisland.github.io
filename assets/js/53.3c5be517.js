(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{381:function(t,a,e){"use strict";e.r(a);var s=e(45),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"事件机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件机制"}},[t._v("#")]),t._v(" 事件机制")]),t._v(" "),e("p",[t._v("React事件机制利用了事件委托的方式，在React内部实现了浏览器中对应事件的合成事件，浏览器在生成虚拟dom树的同时，解析出的合成事件挂载到document上，触发时通过冒泡到最顶层，再由dispatchEvent统一处理。")]),t._v(" "),e("ul",[e("li",[t._v("原生事件的阻止冒泡肯定会阻止合成的触发")])]),t._v(" "),e("h3",{attrs:{id:"优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[t._v("#")]),t._v(" 优势：")]),t._v(" "),e("ul",[e("li",[t._v("参考w3c标准，磨平浏览器之间的差异，用户不需要关心兼容性")]),t._v(" "),e("li",[t._v("所有事件都注册到document上，减少dom节点的事件信息，优化性能")]),t._v(" "),e("li",[t._v("自定义了高级事件，比如onChange，使用方便")])]),t._v(" "),e("h3",{attrs:{id:"事件机制的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件机制的实现"}},[t._v("#")]),t._v(" 事件机制的实现")]),t._v(" "),e("h4",{attrs:{id:"事件的注册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件的注册"}},[t._v("#")]),t._v(" 事件的注册")])])}),[],!1,null,null,null);a.default=r.exports}}]);